package internal

import (
	"io"
	"math/rand"
	"reflect"
	"text/template"
)

var doNotEdit = []byte("// Code generated by github.com/comfortablynull/rp. DO NOT EDIT.\npackage rp")

type bench struct {
	Method Method
	Args   string
}

func Methods(blacklist []string) ([]Method, error) {
	bl := map[string]struct{}{}
	for _, v := range blacklist {
		bl[v] = struct{}{}
	}
	t := reflect.TypeOf(&rand.Rand{})
	methods := make([]Method, 0, t.NumMethod())
	for i := 0; i < t.NumMethod(); i++ {
		method := t.Method(i)
		if _, ok := bl[method.Name]; ok {
			continue
		}
		m, err := BuildMethod(method)
		if err != nil {
			return nil, err
		}
		methods = append(methods, m)
	}
	return methods, nil
}

func Compile(w io.Writer, template *template.Template, blacklist ...string) error {
	if _, err := w.Write(doNotEdit); err != nil {
		return err
	}
	methods, err := Methods(blacklist)
	if err != nil {
		return err
	}
	return template.Execute(w, methods)
}

func CompileBench(w io.Writer, blacklist ...string) error {
	if _, err := w.Write(doNotEdit); err != nil {
		return err
	}
	methods, err := Methods(blacklist)
	if err != nil {
		return err
	}
	benches := make([]bench, len(methods))
	for k, v := range methods {
		vars := ""
		if len(v.inArgs) == 1 {
			vars = "100"
		}
		benches[k] = bench{
			Method: v,
			Args:   vars,
		}
	}
	return Benchmark.Execute(w, benches)
}
