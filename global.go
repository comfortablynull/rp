// Code generated by github.com/comfortablynull/rp. DO NOT EDIT.
package rp
var p = NewPoolSeedFunc(func() int64 { return 1 })

func SetSeedFunc(s SeedFunc)         { p.(*pool).setSeedFunc(s) }
func SetSourceFunc(s SourceFunc)     { p.(*pool).setSourceFunc(s) }
func SetSource64Func(s Source64Func) { p.(*pool).setSource64Func(s) }
func SetRandFunc(r RandFunc)         { p.(*pool).setRandFunc(r) }

func ExpFloat64() (of float64) {
	return p.ExpFloat64()
}
func Float32() (of float32) {
	return p.Float32()
}
func Float64() (of float64) {
	return p.Float64()
}
func Int() (oi int) {
	return p.Int()
}
func Int31() (oi int32) {
	return p.Int31()
}
func Int31n(i int32) (oi int32) {
	return p.Int31n(i)
}
func Int63() (oi int64) {
	return p.Int63()
}
func Int63n(i int64) (oi int64) {
	return p.Int63n(i)
}
func Intn(i int) (oi int) {
	return p.Intn(i)
}
func NormFloat64() (of float64) {
	return p.NormFloat64()
}
func Perm(i int) (oi []int) {
	return p.Perm(i)
}
func Read(u []uint8) (oi int, oe error) {
	return p.Read(u)
}
func Shuffle(i int, f func(int, int)) {
	p.Shuffle(i, f)
}
func Uint32() (ou uint32) {
	return p.Uint32()
}
func Uint64() (ou uint64) {
	return p.Uint64()
}
