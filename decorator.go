// Code generated by github.com/comfortablynull/rp. DO NOT EDIT.
package rp
import (
	"math/rand"
	"sync"
)

type pool struct {
	pool *sync.Pool
}

func newPool() *pool { return &pool{pool: &sync.Pool{}} }
func NewPoolSeedFunc(s SeedFunc) Rand {
	p := newPool()
	p.setSeedFunc(s)
	return p
}

func NewPoolSourceFunc(s SourceFunc) Rand {
	p := newPool()
	p.setSourceFunc(s)
	return p
}

func NewPoolSource64Func(s Source64Func) Rand {
	p := newPool()
	p.setSource64Func(s)
	return p
}

func NewPoolRandFunc(r RandFunc) Rand {
	p := newPool()
	p.setRandFunc(r)
	return p
}

func (p *pool) setSeedFunc(s SeedFunc) {
	p.pool.New = func() interface{} {
		return rand.New(rand.NewSource(s()))
	}
}

func (p *pool) setSourceFunc(s SourceFunc) {
	p.pool.New = func() interface{} { return rand.New(s()) }
}

func (p *pool) setSource64Func(s Source64Func) {
	p.pool.New = func() interface{} {
		return rand.New(s())
	}
}

func (p *pool) setRandFunc(r RandFunc) {
	p.pool.New = func() interface{} { return r() }
}

func (p *pool) ExpFloat64() (of float64) {
	r := p.pool.Get().(*rand.Rand)
	of = r.ExpFloat64()
	p.pool.Put(r)
	return
}

func (p *pool) Float32() (of float32) {
	r := p.pool.Get().(*rand.Rand)
	of = r.Float32()
	p.pool.Put(r)
	return
}

func (p *pool) Float64() (of float64) {
	r := p.pool.Get().(*rand.Rand)
	of = r.Float64()
	p.pool.Put(r)
	return
}

func (p *pool) Int() (oi int) {
	r := p.pool.Get().(*rand.Rand)
	oi = r.Int()
	p.pool.Put(r)
	return
}

func (p *pool) Int31() (oi int32) {
	r := p.pool.Get().(*rand.Rand)
	oi = r.Int31()
	p.pool.Put(r)
	return
}

func (p *pool) Int31n(i int32) (oi int32) {
	r := p.pool.Get().(*rand.Rand)
	oi = r.Int31n(i)
	p.pool.Put(r)
	return
}

func (p *pool) Int63() (oi int64) {
	r := p.pool.Get().(*rand.Rand)
	oi = r.Int63()
	p.pool.Put(r)
	return
}

func (p *pool) Int63n(i int64) (oi int64) {
	r := p.pool.Get().(*rand.Rand)
	oi = r.Int63n(i)
	p.pool.Put(r)
	return
}

func (p *pool) Intn(i int) (oi int) {
	r := p.pool.Get().(*rand.Rand)
	oi = r.Intn(i)
	p.pool.Put(r)
	return
}

func (p *pool) NormFloat64() (of float64) {
	r := p.pool.Get().(*rand.Rand)
	of = r.NormFloat64()
	p.pool.Put(r)
	return
}

func (p *pool) Perm(i int) (oi []int) {
	r := p.pool.Get().(*rand.Rand)
	oi = r.Perm(i)
	p.pool.Put(r)
	return
}

func (p *pool) Read(u []uint8) (oi int, oe error) {
	r := p.pool.Get().(*rand.Rand)
	oi, oe = r.Read(u)
	p.pool.Put(r)
	return
}

func (p *pool) Shuffle(i int, f func(int, int)) {
	r := p.pool.Get().(*rand.Rand)
	r.Shuffle(i, f)
	p.pool.Put(r)
}

func (p *pool) Uint32() (ou uint32) {
	r := p.pool.Get().(*rand.Rand)
	ou = r.Uint32()
	p.pool.Put(r)
	return
}

func (p *pool) Uint64() (ou uint64) {
	r := p.pool.Get().(*rand.Rand)
	ou = r.Uint64()
	p.pool.Put(r)
	return
}

